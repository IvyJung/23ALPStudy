#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

int N, M;
int arr[102][10002];

void compress(int a[])
{
	vector<int> v(a, a + N);
	sort(v.begin(), v.end());
	v.erase(unique(v.begin(), v.end()), v.end());
	for (int i = 0; i < N; i++)
	{
		a[i] = lower_bound(v.begin(), v.end(), a[i]) - v.begin();
	}
}

bool compare(int a[], int b[])
{
	for (int k = 0; k < N; k++)
	{
		if (a[k] != b[k]) return 0;
	}
	return 1;
}

int main(void)
{
	ios::sync_with_stdio(0);
	cin.tie(0);

	cin >> M >> N;
	for (int i = 0; i < M; i++)
	{
		for (int j = 0; j < N; j++)
		{
			cin >> arr[i][j];
		}
		compress(arr[i]);
	}

	int ans = 0;
	for (int i = 0; i < M - 1; i++)
	{
		for (int j = i + 1; j < M; j++)
		{
			ans += compare(arr[i], arr[j]);
		}
	}
	cout << ans;

	return 0;
}
